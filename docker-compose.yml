version: '3.8'

services:
  mongo1:
    image: mongo:5.0
    container_name: mongo1
    ports:
      - "27017:27017"
    command: mongod --replSet rs0 --bind_ip_all
    volumes:
      - mongo1_data:/data/db
    extra_hosts:
      - "host.docker.internal:host-gateway"

  mongo2:
    image: mongo:5.0
    container_name: mongo2
    ports:
      - "27018:27017"
    command: mongod --replSet rs0 --bind_ip_all
    volumes:
      - mongo2_data:/data/db
    depends_on:
      - mongo1
    extra_hosts:
      - "host.docker.internal:host-gateway"

  mongo3:
    image: mongo:5.0
    container_name: mongo3
    ports:
      - "27019:27017"
    command: mongod --replSet rs0 --bind_ip_all
    volumes:
      - mongo3_data:/data/db
    depends_on:
      - mongo1
    extra_hosts:
      - "host.docker.internal:host-gateway"

  mongo-init:
    image: mongo:5.0
    container_name: mongo-init
    depends_on:
      - mongo1
      - mongo2
      - mongo3
    extra_hosts:
      - "host.docker.internal:host-gateway"
    command: >
      bash -c "
      echo 'Waiting for MongoDB nodes to start...';
      for i in {1..30}; do
        if mongosh --host mongo1 --eval 'print(\"Mongo1 ready\")' &>/dev/null &&
           mongosh --host mongo2 --eval 'print(\"Mongo2 ready\")' &>/dev/null &&
           mongosh --host mongo3 --eval 'print(\"Mongo3 ready\")' &>/dev/null; then
          break;
        fi;
        sleep 2;
      done;
      mongosh --host mongo1 --eval \"
        rs.initiate({
          _id: 'rs0',
          members: [
            { _id: 0, host: 'host.docker.internal:27017' },
            { _id: 1, host: 'host.docker.internal:27018' },
            { _id: 2, host: 'host.docker.internal:27019' }
          ]
        })
      \";
      echo 'Replica set initialized with host.docker.internal';"

volumes:
  mongo1_data:
  mongo2_data:
  mongo3_data: